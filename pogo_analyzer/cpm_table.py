"""Combat Power multipliers indexed by Pokémon GO level."""

from __future__ import annotations

from numbers import Real
from typing import Final

# Extracted from https://gamepress.gg/pokemongo/cp-multiplier on 2025-02-08.
CPM: Final[dict[float, float]] = {
    1.0: 0.0940000000,
    1.5: 0.1351374318,
    2.0: 0.1663978700,
    2.5: 0.1926509190,
    3.0: 0.2157324700,
    3.5: 0.2365726613,
    4.0: 0.2557200500,
    4.5: 0.2735303812,
    5.0: 0.2902498800,
    5.5: 0.3060573775,
    6.0: 0.3210876000,
    6.5: 0.3354450362,
    7.0: 0.3492126800,
    7.5: 0.3624577523,
    8.0: 0.3752355900,
    8.5: 0.3875924060,
    9.0: 0.3995672800,
    9.5: 0.4111935514,
    10.0: 0.4225000000,
    10.5: 0.4329264119,
    11.0: 0.4431075500,
    11.5: 0.4530599551,
    12.0: 0.4627983900,
    12.5: 0.4723360830,
    13.0: 0.4816849500,
    13.5: 0.4908558003,
    14.0: 0.4998584400,
    14.5: 0.5087017650,
    15.0: 0.5173939500,
    15.5: 0.5259425113,
    16.0: 0.5343543300,
    16.5: 0.5426357666,
    17.0: 0.5507926900,
    17.5: 0.5588305761,
    18.0: 0.5667545200,
    18.5: 0.5745691530,
    19.0: 0.5822789100,
    19.5: 0.5898879072,
    20.0: 0.5974000100,
    20.5: 0.6048188136,
    21.0: 0.6121572900,
    21.5: 0.6193993650,
    22.0: 0.6265671300,
    22.5: 0.6336445330,
    23.0: 0.6406529500,
    23.5: 0.6475764255,
    24.0: 0.6544356300,
    24.5: 0.6612148066,
    25.0: 0.6679340000,
    25.5: 0.6745775380,
    26.0: 0.6811649200,
    26.5: 0.6876806482,
    27.0: 0.6941436500,
    27.5: 0.7005386730,
    28.0: 0.7068842100,
    28.5: 0.7131649963,
    29.0: 0.7193990900,
    29.5: 0.7255715520,
    30.0: 0.7317000000,
    30.5: 0.7347410386,
    31.0: 0.7377694800,
    31.5: 0.7407855751,
    32.0: 0.7437894300,
    32.5: 0.7467812109,
    33.0: 0.7497610400,
    33.5: 0.7527290867,
    34.0: 0.7556855100,
    34.5: 0.7586303702,
    35.0: 0.7615638400,
    35.5: 0.7644860670,
    36.0: 0.7673971700,
    36.5: 0.7702972690,
    37.0: 0.7731865000,
    37.5: 0.7760649616,
    38.0: 0.7789327500,
    38.5: 0.7817900554,
    39.0: 0.7846369700,
    39.5: 0.7874735802,
    40.0: 0.7903000100,
    40.5: 0.7928039680,
    41.0: 0.7953000100,
    41.5: 0.7978039212,
    42.0: 0.8003000100,
    42.5: 0.8028038810,
    43.0: 0.8053000100,
    43.5: 0.8078038929,
    44.0: 0.8102999900,
    44.5: 0.8128038945,
    45.0: 0.8152999900,
    45.5: 0.8178038964,
    46.0: 0.8202999900,
    46.5: 0.8228038972,
    47.0: 0.8252999900,
    47.5: 0.8278038985,
    48.0: 0.8302999900,
    48.5: 0.8328038991,
    49.0: 0.8352999900,
    49.5: 0.8378039006,
    50.0: 0.8402999900,
    50.5: 0.8428039097,
    51.0: 0.8452999900,
}

_MIN_LEVEL: Final[float] = min(CPM)
_MAX_LEVEL: Final[float] = max(CPM)


def get_cpm(level: float) -> float:
    """Return the CPM for the provided level.

    Levels must be between 1.0 and 51.0 inclusive in 0.5-level increments.
    """

    if not isinstance(level, Real):
        raise TypeError("level must be a number")

    normalized = float(level)

    if not (_MIN_LEVEL <= normalized <= _MAX_LEVEL):
        raise ValueError(
            f"Level {normalized} is outside the supported range "
            f"{_MIN_LEVEL:g}–{_MAX_LEVEL:g}."
        )

    rounded = round(normalized * 2) / 2
    if abs(rounded - normalized) > 1e-9:
        raise ValueError("Levels must be specified in 0.5 increments.")

    try:
        return CPM[rounded]
    except KeyError as exc:
        raise ValueError(
            f"No CPM entry for level {rounded:g}; expected one of "
            f"{sorted(CPM)}."
        ) from exc
